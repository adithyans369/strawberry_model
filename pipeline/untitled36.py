# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1frrZSk5OwWk7QUhl3Fjt44lvGfxeV9KG
"""

import tensorflow as tf

# Load the saved model
model = tf.keras.models.load_model("/content/mobilenetv2_fruit_classifier_day13(1).h5")

# Print a summary of the model architecture (optional)
model.summary()

from glob import glob
import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

# ‚úÖ Update path if needed
extract_path = "/content/test_images"

# ‚úÖ Search recursively for images
image_paths = glob(os.path.join(extract_path, "**", "*.jpg"), recursive=True) + \
              glob(os.path.join(extract_path, "**", "*.jpeg"), recursive=True) + \
              glob(os.path.join(extract_path, "**", "*.png"), recursive=True)

print(f"üîç Found {len(image_paths)} image(s)\n")

class_names = ['ripe', 'turning', 'unripe']

for img_path in image_paths:
    try:
        img = image.load_img(img_path, target_size=(224, 224))
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = img_array / 255.0

        predictions = model.predict(img_array)
        predicted_index = np.argmax(predictions[0])
        predicted_label = class_names[predicted_index]

        print(f"üñºÔ∏è {os.path.basename(img_path)}: {predicted_label} (index {predicted_index})")
        plt.imshow(img)
        plt.title(f"Predicted: {predicted_label}")
        plt.axis('off')
        plt.show()

    except Exception as e:
        print(f"‚ö†Ô∏è Error with image {img_path}: {e}")

